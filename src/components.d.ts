/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  DatabaseService,
} from './services/database';
import {
  Color,
} from '@ionic/core';
import {
  AuthService,
} from './services/auth';
import {
  UserService,
} from './services/user';

export namespace Components {
  interface AppAbout {}
  interface AppApps {}
  interface AppCommunity {}
  interface AppMedia {}
  interface AppRoot {}
  interface MlContact {
    'db': DatabaseService;
  }
  interface MlFloatingButton {
    /**
    * The list of buttons to show when the material button is clicked
    */
    'buttonList': {
      /**
      * The title to show next to the button
      */
      title: string;
      /**
      * The icon to use in the button
      */
      icon: string;
      /**
      * The color from the theme to make the button
      */
      color: Color;
      /**
      * The functionality to run when the button is clicked
      */
      onClick: (event: any) => any;
    }[];
    /**
    * The icon to use on the material button when it's closed
    */
    'openIcon': string;
    /**
    * The url to link the material button to
    */
    'url': string;
  }
  interface MlForm {
    /**
    * The data from the form being filled out
    */
    'formData': any;
    /**
    * The name of the form used for ID and name
    */
    'name': string;
    /**
    * Adds a padding around the inside of the form
    */
    'padding': boolean;
  }
  interface MlHome {
    'auth': AuthService;
    'db': DatabaseService;
  }
  interface MlInput {
    'actionOptions': any;
    'autocapitalize': string;
    'autocomplete': "on" | "off";
    'autocorrect': "on" | "off";
    'autofocus': boolean;
    'disabled': boolean;
    'edit': boolean;
    'iconLeft': string;
    'iconRight': string;
    'info': string;
    'infoShow': boolean;
    'label': string;
    'max': string;
    'maxlength': number;
    'min': string;
    'minlength': number;
    'name': string;
    'placeholder': any;
    'required': any;
    'setFocus': () => Promise<void>;
    'silence': boolean;
    'step': string;
    'type': any;
    'user': UserService;
    'value': any;
  }
}

declare global {


  interface HTMLAppAboutElement extends Components.AppAbout, HTMLStencilElement {}
  var HTMLAppAboutElement: {
    prototype: HTMLAppAboutElement;
    new (): HTMLAppAboutElement;
  };

  interface HTMLAppAppsElement extends Components.AppApps, HTMLStencilElement {}
  var HTMLAppAppsElement: {
    prototype: HTMLAppAppsElement;
    new (): HTMLAppAppsElement;
  };

  interface HTMLAppCommunityElement extends Components.AppCommunity, HTMLStencilElement {}
  var HTMLAppCommunityElement: {
    prototype: HTMLAppCommunityElement;
    new (): HTMLAppCommunityElement;
  };

  interface HTMLAppMediaElement extends Components.AppMedia, HTMLStencilElement {}
  var HTMLAppMediaElement: {
    prototype: HTMLAppMediaElement;
    new (): HTMLAppMediaElement;
  };

  interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {}
  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };

  interface HTMLMlContactElement extends Components.MlContact, HTMLStencilElement {}
  var HTMLMlContactElement: {
    prototype: HTMLMlContactElement;
    new (): HTMLMlContactElement;
  };

  interface HTMLMlFloatingButtonElement extends Components.MlFloatingButton, HTMLStencilElement {}
  var HTMLMlFloatingButtonElement: {
    prototype: HTMLMlFloatingButtonElement;
    new (): HTMLMlFloatingButtonElement;
  };

  interface HTMLMlFormElement extends Components.MlForm, HTMLStencilElement {}
  var HTMLMlFormElement: {
    prototype: HTMLMlFormElement;
    new (): HTMLMlFormElement;
  };

  interface HTMLMlHomeElement extends Components.MlHome, HTMLStencilElement {}
  var HTMLMlHomeElement: {
    prototype: HTMLMlHomeElement;
    new (): HTMLMlHomeElement;
  };

  interface HTMLMlInputElement extends Components.MlInput, HTMLStencilElement {}
  var HTMLMlInputElement: {
    prototype: HTMLMlInputElement;
    new (): HTMLMlInputElement;
  };
  interface HTMLElementTagNameMap {
    'app-about': HTMLAppAboutElement;
    'app-apps': HTMLAppAppsElement;
    'app-community': HTMLAppCommunityElement;
    'app-media': HTMLAppMediaElement;
    'app-root': HTMLAppRootElement;
    'ml-contact': HTMLMlContactElement;
    'ml-floating-button': HTMLMlFloatingButtonElement;
    'ml-form': HTMLMlFormElement;
    'ml-home': HTMLMlHomeElement;
    'ml-input': HTMLMlInputElement;
  }
}

declare namespace LocalJSX {
  interface AppAbout extends JSXBase.HTMLAttributes<HTMLAppAboutElement> {}
  interface AppApps extends JSXBase.HTMLAttributes<HTMLAppAppsElement> {}
  interface AppCommunity extends JSXBase.HTMLAttributes<HTMLAppCommunityElement> {}
  interface AppMedia extends JSXBase.HTMLAttributes<HTMLAppMediaElement> {}
  interface AppRoot extends JSXBase.HTMLAttributes<HTMLAppRootElement> {}
  interface MlContact extends JSXBase.HTMLAttributes<HTMLMlContactElement> {
    'db'?: DatabaseService;
  }
  interface MlFloatingButton extends JSXBase.HTMLAttributes<HTMLMlFloatingButtonElement> {
    /**
    * The list of buttons to show when the material button is clicked
    */
    'buttonList'?: {
      /**
      * The title to show next to the button
      */
      title: string;
      /**
      * The icon to use in the button
      */
      icon: string;
      /**
      * The color from the theme to make the button
      */
      color: Color;
      /**
      * The functionality to run when the button is clicked
      */
      onClick: (event: any) => any;
    }[];
    /**
    * The icon to use on the material button when it's closed
    */
    'openIcon'?: string;
    /**
    * The url to link the material button to
    */
    'url'?: string;
  }
  interface MlForm extends JSXBase.HTMLAttributes<HTMLMlFormElement> {
    /**
    * The data from the form being filled out
    */
    'formData'?: any;
    /**
    * The name of the form used for ID and name
    */
    'name'?: string;
    /**
    * Emitted when the user submits the form
    */
    'onMlSubmit'?: (event: CustomEvent<{ event; data: any; name: string }>) => void;
    /**
    * Adds a padding around the inside of the form
    */
    'padding'?: boolean;
  }
  interface MlHome extends JSXBase.HTMLAttributes<HTMLMlHomeElement> {
    'auth'?: AuthService;
    'db'?: DatabaseService;
  }
  interface MlInput extends JSXBase.HTMLAttributes<HTMLMlInputElement> {
    'actionOptions'?: any;
    'autocapitalize'?: string;
    'autocomplete'?: "on" | "off";
    'autocorrect'?: "on" | "off";
    'autofocus'?: boolean;
    'disabled'?: boolean;
    'edit'?: boolean;
    'iconLeft'?: string;
    'iconRight'?: string;
    'info'?: string;
    'infoShow'?: boolean;
    'label'?: string;
    'max'?: string;
    'maxlength'?: number;
    'min'?: string;
    'minlength'?: number;
    'name'?: string;
    'onMlBlur'?: (event: CustomEvent<any>) => void;
    'onMlChange'?: (event: CustomEvent<any>) => void;
    'onMlFocus'?: (event: CustomEvent<any>) => void;
    'onMlInput'?: (event: CustomEvent<any>) => void;
    'placeholder'?: any;
    'required'?: any;
    'silence'?: boolean;
    'step'?: string;
    'type'?: any;
    'user'?: UserService;
    'value'?: any;
  }

  interface IntrinsicElements {
    'app-about': AppAbout;
    'app-apps': AppApps;
    'app-community': AppCommunity;
    'app-media': AppMedia;
    'app-root': AppRoot;
    'ml-contact': MlContact;
    'ml-floating-button': MlFloatingButton;
    'ml-form': MlForm;
    'ml-home': MlHome;
    'ml-input': MlInput;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


